module.exports = function (env) {
  /**
   * Instantiate object used to store the methods registered as a
   * 'filter' (of the same name) within nunjucks. You can override
   * gov.uk core filters by creating filter methods of the same name.
   * @type {Object}
   */
  var filters = {}

  /* ------------------------------------------------------------------
    add your methods to the filters obj below this comment block:
    @example:

    filters.sayHi = function(name) {
        return 'Hi ' + name + '!'
    }

    Which in your templates would be used as:

    {{ 'Paul' | sayHi }} => 'Hi Paul'

    Notice the first argument of your filters method is whatever
    gets 'piped' via '|' to the filter.

    Filters can take additional arguments, for example:

    filters.sayHi = function(name,tone) {
      return (tone == 'formal' ? 'Greetings' : 'Hi') + ' ' + name + '!'
    }

    Which would be used like this:

    {{ 'Joel' | sayHi('formal') }} => 'Greetings Joel!'
    {{ 'Gemma' | sayHi }} => 'Hi Gemma!'

    For more on filters and how to write them see the Nunjucks
    documentation.

  ------------------------------------------------------------------ */

  filters.selected = function (dataKey, selectWhenMatchesValue) {
    if (this.ctx.data === undefined) {
      return ''
    }

    var dataValue = this.ctx.data[dataKey]

    if (dataValue === undefined && selectWhenMatchesValue === '') {
      return 'selected'
    }

    if (dataValue === selectWhenMatchesValue) {
      return 'selected'
    }
  }

  filters.dateStringFromData = function (dataKey) {
    if (this.ctx.data === undefined) {
      return ''
    }
    var day = this.ctx.data[dataKey + '-day']
    var month = this.ctx.data[dataKey + '-month']
    var year = this.ctx.data[dataKey + '-year']
    var filtered = [day, month, year].filter(function (element) {
      return element && element !== ''
    })
    return filtered.join('/')
  }

  filters.compact = function (arr) {
    return arr.filter(function (element) {
      return element && element !== ''
    })
  }

  filters.tick = function (value) {

    if (value && value !== '') {
      return filters.safe('<span class="valid-symbol">&check;</span>')
    } else {
      return filters.safe('<span class="invalid-symbol">x</span>')
    }
  }

  /* ------------------------------------------------------------------
    keep the following line to return your filters to the app
  ------------------------------------------------------------------ */
  return filters
}
